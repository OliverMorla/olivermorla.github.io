/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    testimonials: Testimonial;
    'privacy-policy': PrivacyPolicy;
    'terms-of-service': TermsOfService;
    projects: Project;
    services: Service;
    pages: Page;
    images: Image;
    logo: Logo;
    warranty: Warranty;
    documents: Document;
    faq: Faq;
    certifications: Certification;
    resume: Resume;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    testimonials: TestimonialsSelect<false> | TestimonialsSelect<true>;
    'privacy-policy': PrivacyPolicySelect<false> | PrivacyPolicySelect<true>;
    'terms-of-service': TermsOfServiceSelect<false> | TermsOfServiceSelect<true>;
    projects: ProjectsSelect<false> | ProjectsSelect<true>;
    services: ServicesSelect<false> | ServicesSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    images: ImagesSelect<false> | ImagesSelect<true>;
    logo: LogoSelect<false> | LogoSelect<true>;
    warranty: WarrantySelect<false> | WarrantySelect<true>;
    documents: DocumentsSelect<false> | DocumentsSelect<true>;
    faq: FaqSelect<false> | FaqSelect<true>;
    certifications: CertificationsSelect<false> | CertificationsSelect<true>;
    resume: ResumeSelect<false> | ResumeSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  name?: string | null;
  image?: (number | null) | Media;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "testimonials".
 */
export interface Testimonial {
  id: number;
  /**
   * This is used to sort the testimonials from least to greatest
   */
  position?: number | null;
  name: string;
  message: string;
  location: string;
  role?: string | null;
  company?: string | null;
  image?: (number | null) | Media;
  rating: number;
  updatedAt: string;
  createdAt: string;
}
/**
 * NOTE: Choose one, for example a PDF or a written-version of Privacy Policy
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "privacy-policy".
 */
export interface PrivacyPolicy {
  id: number;
  /**
   * Upload a PDF document
   */
  document?: (number | null) | Document;
  /**
   * Write down the privacy policy content
   */
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "documents".
 */
export interface Document {
  id: number;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * NOTE: Choose one, for example a PDF or a written-version of Terms of Service
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "terms-of-service".
 */
export interface TermsOfService {
  id: number;
  /**
   * Upload a PDF document
   */
  document?: (number | null) | Document;
  /**
   * Write down the terms of service content
   */
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects".
 */
export interface Project {
  id: number;
  /**
   * This is used to sort the projects from least to greatest
   */
  position?: number | null;
  /**
   * Optional, if you want to add a title to the project.
   */
  title?: string | null;
  /**
   * Optional, if you want to add a category to the project.
   */
  category?:
    | (
        | 'Web Development'
        | 'Mobile Development'
        | 'Software Development'
        | 'Portfolio'
        | 'eCommerce'
        | 'Landing Page'
        | 'SaaS'
        | 'Blog'
        | 'Other'
      )
    | null;
  /**
   * If you want to feature this project on the homepage, check this box.
   */
  featured?: boolean | null;
  /**
   * Optional, if you want to add a link to the project.
   */
  link?: string | null;
  /**
   * Optional, if you want to add a status to the project.
   */
  status?: ('Completed' | 'In Progress' | 'On Hold' | 'Cancelled') | null;
  /**
   * For example: 2024-01-01
   */
  startedAt?: string | null;
  /**
   * For example: 2024-01-01
   */
  completedAt?: string | null;
  /**
   * Optional, if you want to add a stack to the project.
   */
  stack?:
    | (
        | 'All'
        | 'Next.js'
        | 'Tailwind CSS'
        | 'TypeScript'
        | 'React'
        | 'Node.js'
        | 'Express'
        | 'MongoDB'
        | 'PostgreSQL'
        | 'MySQL'
        | 'SQLite'
        | 'Git'
        | 'GitHub'
        | 'Redis'
        | 'Docker'
        | 'Kubernetes'
        | 'AWS'
        | 'Azure'
        | 'Azure - App Service'
        | 'Azure - Storage'
        | 'Azure - Functions'
        | 'Firebase'
        | 'Supabase'
        | 'Vercel'
        | 'Cloudflare'
        | 'Cloudflare R2'
        | 'PostHog'
        | 'Plausible'
        | 'Google Analytics'
        | 'OpenAI'
        | 'Stripe'
        | 'Resend'
        | 'Mailjet'
        | 'AWS - S3'
        | 'AWS - Lambda'
        | 'AWS - API Gateway'
        | 'AWS - CloudFront'
      )[]
    | null;
  images?: (number | Media)[] | null;
  /**
   * Optional, if you want to add a description to the project.
   */
  description?: string | null;
  /**
   * Optional, if you want to add a publicity to the project.
   */
  audience?: ('Client' | 'Personal') | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "services".
 */
export interface Service {
  id: number;
  /**
   * This is used to sort the services from least to greatest, for example: Service 1, Service 2, Service 3, etc.
   */
  position?: number | null;
  title: string;
  /**
   * This is used to add a subtitle to the service. The subtitle is optional and it's located below the title.
   */
  subtitle?: string | null;
  /**
   * This is used to add a price to the service. The price is optional and it's located below the subtitle.
   */
  price?: string | null;
  /**
   * This is used to add tags to the service. The tags are optional and they're located below the price.
   */
  tags?:
    | (
        | 'React.js'
        | 'Next.js'
        | 'Tailwind CSS'
        | 'TypeScript'
        | 'Node.js'
        | 'Express'
        | 'MongoDB'
        | 'PostgreSQL'
        | 'MySQL'
        | 'SQLite'
        | 'Docker'
        | 'Kubernetes'
        | 'AWS'
      )
    | null;
  description: string;
  benefits?:
    | {
        benefit?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  /**
   * The title of the page, for example: About
   */
  title?: string | null;
  /**
   * The route of the page, for example: /about
   */
  route?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "images".
 */
export interface Image {
  id: number;
  /**
   * Optional, if you want to add a title to the image.
   */
  title?: string | null;
  /**
   * This is used to sort the process from least to greatest, for example: Process 1, Process 2, Process 3, etc.
   */
  position?: number | null;
  image: number | Media;
  /**
   * Optional, if you want to add a description to the image.
   */
  description?: string | null;
  page?: (number | Page)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "logo".
 */
export interface Logo {
  id: number;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * NOTE: Choose one, for example a PDF or a written-version of Warranty
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "warranty".
 */
export interface Warranty {
  id: number;
  /**
   * Upload a PDF document
   */
  document?: (number | null) | Document;
  /**
   * Write down the warranty content
   */
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "faq".
 */
export interface Faq {
  id: number;
  question?: string | null;
  answer?: string | null;
  /**
   * This is used to sort the faqs from least to greatest
   */
  position?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "certifications".
 */
export interface Certification {
  id: number;
  title: string;
  issuer?:
    | (
        | 'AWS'
        | 'Google'
        | 'Microsoft'
        | 'IBM'
        | 'Oracle'
        | 'SAP'
        | 'Salesforce'
        | 'Cisco'
        | 'VMware'
        | 'Dell'
        | 'HP'
        | 'Lenovo'
        | 'Tata'
        | 'Wipro'
        | 'HCL'
        | 'Tech Mahindra'
        | 'Capgemini'
        | 'Accenture'
        | 'TCS'
        | 'Infosys'
        | 'Coursera'
        | 'Udemy'
        | 'LinkedIn'
        | 'Other'
      )
    | null;
  subtitle?: string | null;
  description?: string | null;
  company?:
    | (
        | 'AWS'
        | 'Google'
        | 'Microsoft'
        | 'IBM'
        | 'Oracle'
        | 'SAP'
        | 'Salesforce'
        | 'Cisco'
        | 'VMware'
        | 'Dell'
        | 'HP'
        | 'Lenovo'
        | 'Tata'
        | 'Wipro'
        | 'HCL'
        | 'Tech Mahindra'
        | 'Capgemini'
        | 'Accenture'
        | 'TCS'
        | 'Infosys'
        | 'Udemy'
        | 'LinkedIn'
        | 'Other'
      )
    | null;
  issuedDate?: string | null;
  expiresAt?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "resume".
 */
export interface Resume {
  id: number;
  /**
   * Upload a PDF document
   */
  document?: (number | null) | Document;
  /**
   * Write down the resume content
   */
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'testimonials';
        value: number | Testimonial;
      } | null)
    | ({
        relationTo: 'privacy-policy';
        value: number | PrivacyPolicy;
      } | null)
    | ({
        relationTo: 'terms-of-service';
        value: number | TermsOfService;
      } | null)
    | ({
        relationTo: 'projects';
        value: number | Project;
      } | null)
    | ({
        relationTo: 'services';
        value: number | Service;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'images';
        value: number | Image;
      } | null)
    | ({
        relationTo: 'logo';
        value: number | Logo;
      } | null)
    | ({
        relationTo: 'warranty';
        value: number | Warranty;
      } | null)
    | ({
        relationTo: 'documents';
        value: number | Document;
      } | null)
    | ({
        relationTo: 'faq';
        value: number | Faq;
      } | null)
    | ({
        relationTo: 'certifications';
        value: number | Certification;
      } | null)
    | ({
        relationTo: 'resume';
        value: number | Resume;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  name?: T;
  image?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "testimonials_select".
 */
export interface TestimonialsSelect<T extends boolean = true> {
  position?: T;
  name?: T;
  message?: T;
  location?: T;
  role?: T;
  company?: T;
  image?: T;
  rating?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "privacy-policy_select".
 */
export interface PrivacyPolicySelect<T extends boolean = true> {
  document?: T;
  content?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "terms-of-service_select".
 */
export interface TermsOfServiceSelect<T extends boolean = true> {
  document?: T;
  content?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects_select".
 */
export interface ProjectsSelect<T extends boolean = true> {
  position?: T;
  title?: T;
  category?: T;
  featured?: T;
  link?: T;
  status?: T;
  startedAt?: T;
  completedAt?: T;
  stack?: T;
  images?: T;
  description?: T;
  audience?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "services_select".
 */
export interface ServicesSelect<T extends boolean = true> {
  position?: T;
  title?: T;
  subtitle?: T;
  price?: T;
  tags?: T;
  description?: T;
  benefits?:
    | T
    | {
        benefit?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  route?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "images_select".
 */
export interface ImagesSelect<T extends boolean = true> {
  title?: T;
  position?: T;
  image?: T;
  description?: T;
  page?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "logo_select".
 */
export interface LogoSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "warranty_select".
 */
export interface WarrantySelect<T extends boolean = true> {
  document?: T;
  content?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "documents_select".
 */
export interface DocumentsSelect<T extends boolean = true> {
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "faq_select".
 */
export interface FaqSelect<T extends boolean = true> {
  question?: T;
  answer?: T;
  position?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "certifications_select".
 */
export interface CertificationsSelect<T extends boolean = true> {
  title?: T;
  issuer?: T;
  subtitle?: T;
  description?: T;
  company?: T;
  issuedDate?: T;
  expiresAt?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "resume_select".
 */
export interface ResumeSelect<T extends boolean = true> {
  document?: T;
  content?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}